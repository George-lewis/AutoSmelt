package com.glewis.autosmelt.mixin;

import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;

import com.glewis.autosmelt.FakeInventory;
import com.glewis.autosmelt.Mod;

import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.injection.At;
import org.spongepowered.asm.mixin.injection.Inject;
import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;

import net.minecraft.block.Block;
import net.minecraft.block.BlockState;
import net.minecraft.block.entity.BlockEntity;
import net.minecraft.enchantment.Enchantment;
import net.minecraft.enchantment.EnchantmentHelper;
import net.minecraft.entity.Entity;
import net.minecraft.entity.player.PlayerEntity;
import net.minecraft.item.ItemStack;
import net.minecraft.recipe.RecipeType;
import net.minecraft.server.world.ServerWorld;
import net.minecraft.sound.SoundCategory;
import net.minecraft.sound.SoundEvents;
import net.minecraft.util.math.BlockPos;

@Mixin(Block.class)
public class SmeltingMixin {

	private static final FakeInventory INVENTORY = new FakeInventory();
	
	@Inject(at = @At("RETURN"), cancellable = true, method = "getDroppedStacks(Lnet/minecraft/block/BlockState;Lnet/minecraft/server/world/ServerWorld;Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/block/entity/BlockEntity;Lnet/minecraft/entity/Entity;Lnet/minecraft/item/ItemStack;)Ljava/util/List;")
	private static void getDrops(BlockState state, ServerWorld world, BlockPos pos, /*@Nullable*/ BlockEntity blockEntity, /*@Nullable*/ Entity entity, ItemStack stack, CallbackInfoReturnable<List<ItemStack>> info) {

		// Make sure a player broke the block
		if (entity == null || !(entity instanceof PlayerEntity)) {
			return;
		}

		final PlayerEntity player = (PlayerEntity) entity;

		final ItemStack tool = player.getMainHandStack();

		final Map<Enchantment, Integer> enchants = EnchantmentHelper.get(tool);

		// If tool has the smelting enchant
		if (enchants.containsKey(Mod.SMELTING)) {
			
			// Normal drops generated by normal .getDroppedStacks(...) function
			final List<ItemStack> drops = info.getReturnValue();

			// The new drops, if any
			final List<ItemStack> newDrops = drops.stream()
				.map(drop -> getFurnaceOutput(drop, world))
				.filter(opt -> opt.isPresent())
				.map(opt -> opt.get())
				.collect(Collectors.toList());

			if (newDrops.size() > 0) {

				// Play "smelting" sound
				world.playSound(null, pos, SoundEvents.ENTITY_BLAZE_SHOOT, SoundCategory.BLOCKS, 1f, 0.75f);
				
				// Change the return value
				info.setReturnValue(newDrops);
			}

		}

	}

	/**
	 * Get the result of smelting `stack` in a furnace, if any
	 * @param stack The stack to smelt
	 * @param world The world
	 * @return The furnace output
	 */
	private static Optional<ItemStack> getFurnaceOutput(ItemStack stack, ServerWorld world) {
		
		// Setup fake inventory
		INVENTORY.setStack(0, stack);

		// Return recipes with matching input
		return world.getRecipeManager()
			.listAllOfType(RecipeType.SMELTING)
			.stream()
			.filter(recipe -> recipe.matches(INVENTORY, world))
			.findFirst()
			.map(recipe -> recipe.getOutput().copy());
	}

}
